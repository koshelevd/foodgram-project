name: Foodgram workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt

    - name: Lint with flake8
      run: flake8 .

  create-envfile:
    name: Create .env file
    runs-on: ubuntu-18.04
    needs: tests
    steps:
    - name: Make envfile
      uses: SpicyPizza/create-envfile@v1
      with:
        envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
        envkey_EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        envkey_EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        envkey_DB_NAME: ${{ secrets.DB_NAME }}
        envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        envkey_EMAIL_HOST: 'smtp.yandex.ru'
        envkey_EMAIL_PORT: '465'
        envkey_EMAIL_USE_SSL: True
        envkey_SERVER_EMAIL: 'EMAIL_HOST_USER'
        envkey_DEFAULT_FROM_EMAIL: 'DEFAULT_FROM_EMAIL'
        envkey_DB_ENGINE: 'django.db.backends.postgresql'
        envkey_DB_HOST: 'db'
        envkey_DB_PORT: '5432'
        envkey_DEBUG: False
        directory: ./

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: create-envfile
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: koshelevd/foodgram:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@v2
      - name: copy deploy files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          overwrite: true
          source: './nginx_deploy.conf, ./docker-compose.yaml'
          target: 'code'
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          envkey_EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          envkey_DB_NAME: ${{ secrets.DB_NAME }}
          envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          envkey_EMAIL_HOST: 'smtp.yandex.ru'
          envkey_EMAIL_PORT: '465'
          envkey_EMAIL_USE_SSL: True
          envkey_SERVER_EMAIL: 'EMAIL_HOST_USER'
          envkey_DEFAULT_FROM_EMAIL: 'DEFAULT_FROM_EMAIL'
          envkey_DB_ENGINE: 'django.db.backends.postgresql'
          envkey_DB_HOST: 'db'
          envkey_DB_PORT: '5432'
          envkey_DEBUG: False
          directory: ./code
      - name: deploy project
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ~/code
            sudo docker-compose pull web
            sudo docker-compose down
            sudo docker-compose up --build -d
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!
